syntax = "proto3";

package regression;

option go_package = "github.com/your-org/go-regression-lib/pkg/proto";

// 回归服务定义
service RegressionService {
    // 训练模型
    rpc TrainModel(TrainRequest) returns (TrainResponse);
    // 预测
    rpc Predict(PredictRequest) returns (PredictResponse);
    // 评估模型
    rpc Evaluate(EvaluateRequest) returns (EvaluateResponse);
    // 获取模型信息
    rpc GetModelInfo(ModelInfoRequest) returns (ModelInfoResponse);
    // 保存模型
    rpc SaveModel(SaveModelRequest) returns (SaveModelResponse);
    // 加载模型
    rpc LoadModel(LoadModelRequest) returns (LoadModelResponse);
}

// 训练请求
message TrainRequest {
    string model_type = 1;  // 模型类型: ols, ridge, lasso, logistic, polynomial, etc.
    Dataset dataset = 2;
    map<string, string> parameters = 3;
}

// 数据集
message Dataset {
    repeated Feature features = 1;
    repeated double target = 2;
    repeated string feature_names = 3;
}

// 特征数据
message Feature {
    string name = 1;
    repeated double values = 2;
}

// 训练响应
message TrainResponse {
    string model_id = 1;
    double training_score = 2;
    map<string, double> metrics = 3;
    string status = 4;
    string message = 5;
}

// 预测请求
message PredictRequest {
    string model_id = 1;
    Dataset dataset = 2;
}

// 预测响应
message PredictResponse {
    repeated double predictions = 1;
    string status = 2;
    string message = 3;
}

// 评估请求
message EvaluateRequest {
    string model_id = 1;
    Dataset dataset = 2;
}

// 评估响应
message EvaluateResponse {
    map<string, double> metrics = 1;
    string status = 2;
    string message = 3;
}

// 模型信息请求
message ModelInfoRequest {
    string model_id = 1;
}

// 模型信息响应
message ModelInfoResponse {
    string model_type = 1;
    map<string, string> parameters = 2;
    repeated double coefficients = 3;
    double intercept = 4;
    string status = 5;
    string message = 6;
}

// 保存模型请求
message SaveModelRequest {
    string model_id = 1;
    string file_path = 2;
}

// 保存模型响应
message SaveModelResponse {
    string status = 1;
    string message = 2;
}

// 加载模型请求
message LoadModelRequest {
    string file_path = 1;
}

// 加载模型响应
message LoadModelResponse {
    string model_id = 1;
    string status = 2;
    string message = 3;
}
